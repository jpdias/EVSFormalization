class RTALMemory
instance variables
	public static record: map Candidate to nat := {|->};
	public static memory: seq of RTAL := [];
operations
	public add: RTAL ==> ()
	add(rt)==(
	 memory := memory ^ [rt]; 
	)
	post len memory = len memory~+1;
	
	public RTALMemory: map Candidate to nat ==> RTALMemory
	RTALMemory(rec) == (
										 memory:=[];
										 record := rec; 
									   return self)
	pre card dom rec <> 0 
	post record = rec;
end RTALMemory
-----------------------------------------------------------------------
class RTAL 
instance variables
operations
	public Do : () ==> ()
	Do() == is subclass responsibility;
end RTAL
----------------------------------------------------------------------
class RTALStart is subclass of RTAL,RTALMemory
instance variables
	voter : Voter;
operations
	public RTALStart: Voter ==> RTALStart 
	RTALStart(v) == (
							voter := v;
							return self)
	pre v.name <> []
	post voter = v;
	
	public Do :  () ==> ()
	Do() ==  (return;)
	pre voter.name <> [];
	
end RTALStart
--------------------------------------------------------------
class RTALVote is subclass of RTAL, RTALMemory
instance variables
	 candidate : Candidate;
operations
	public RTALVote: Candidate ==> RTALVote 
	RTALVote(c) == (
							candidate := c;
							return self)
	pre c in set dom record
	post candidate in set dom record;
	
	public Do :  () ==> ()
	Do() == (return;)
	pre candidate.name <> [];
end RTALVote
----------------------------------------------------------------
class RTALConfirm is subclass of RTAL, RTALMemory
instance variables 
	confirm : bool := false;
	candidate : Candidate;
operations
	public RTALConfirm: bool*Candidate ==> RTALConfirm 
	RTALConfirm(t,c) == (
							confirm := t;
							candidate:= c;
							return self)
	post confirm = t;

	public Do : () ==> ()
	Do() == (
		if(confirm)
		then(
			record(candidate):=record(candidate)+1;
		);
	)
	pre (confirm = true or confirm = false) and candidate in set dom record
	post candidate in set dom record;
end RTALConfirm

