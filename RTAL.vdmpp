class RTALMemory
instance variables
  public static memory: seq of RTAL := [];
operations
	public add: RTAL ==> ()
	add(rt)==(
	 memory := memory ^ [rt]; 
	)
	post len memory = len memory~+1;
end RTALMemory
-----------------------------------------------------------------------
class RTAL 
instance variables
operations
	public Do : (map Candidate to nat) ==> (map Candidate to nat)
	Do(record) == is subclass responsibility;
end RTAL
----------------------------------------------------------------------
class RTALInitialize is subclass of RTAL
instance variables
	candidates : map Candidate to nat;
operations
	public RTALInitialize: map Candidate to nat ==> RTALInitialize 
	RTALInitialize(temp) == (
							candidates := temp;
							return self)
	pre card dom temp <> 0
	post candidates = temp;
	
	public Do :  (map Candidate to nat) ==> (map Candidate to nat)
	Do(record) ==  (
		dcl temp : map Candidate to nat := record;
		temp :=candidates;
		return temp)
	pre card dom candidates <> 0;
	
end RTALInitialize

----------------------------------------------------------------------

class RTALStart is subclass of RTAL
instance variables
	voter : Voter;
operations
	public RTALStart: Voter ==> RTALStart 
	RTALStart(v) == (
							voter := v;
							return self)
	pre v.name <> []
	post voter = v;
	
	public Do :  (map Candidate to nat) ==> (map Candidate to nat)
	Do(record) ==  (return record;)
	pre voter.name <> [];
	
end RTALStart
--------------------------------------------------------------
class RTALVote is subclass of RTAL
instance variables
	 candidate : Candidate;
operations
	public RTALVote: Candidate ==> RTALVote 
	RTALVote(c) == (
							candidate := c;
							return self);
	
	public Do :  (map Candidate to nat) ==> (map Candidate to nat)
	Do(record) == (return record;)
	pre candidate.name <> [];
end RTALVote
----------------------------------------------------------------
class RTALConfirm is subclass of RTAL
instance variables 
	confirm : bool := false;
	candidate : Candidate;
operations
	public RTALConfirm: bool*Candidate ==> RTALConfirm 
	RTALConfirm(t,c) == (
							confirm := t;
							candidate:= c;
							return self)
	post confirm = t;

	public Do : (map Candidate to nat) ==> (map Candidate to nat)
	Do(record) == (
		dcl temp:map Candidate to nat := record;
		if(confirm)
		then(
			temp(candidate):=temp(candidate)+1;
			return temp;
		)
		else(
			return temp;
		);
	)
	pre (confirm = true or confirm = false)
end RTALConfirm

