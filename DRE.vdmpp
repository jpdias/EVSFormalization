class DRE
instance variables
	private code: nat1 :=9999;
	public memory: map Candidate to nat := {|->} ;
	public log: RTAL := new RTALBuild();
	private CurrentPBE: PBE;
	public StateMachine: VoteState := new VoteState();
	private CurrentChoice: Candidate := new Candidate(); 
	private CurrentVoter: Voter := new Voter();
operations
-- Constructor
	public DRE: PBE ==> DRE 
	DRE(pbe) == (
							CurrentPBE := pbe;
							StateMachine.toStop();
							for all cand in set CurrentPBE.ballot do
				      (
				       	memory:=memory++{cand|->0};
				      );
				      log := new RTALBuild(memory, CurrentPBE.voters);
							return self)
	pre 
		pbe.ballot <> {}
		and pbe.voters <> {}
		and pbe.code = code
	post 
		self.CurrentPBE.ballot = pbe.ballot
		and self.CurrentPBE.voters = pbe.voters;
	
	public getResult:() ==> map Candidate to nat
	getResult()== return memory;
	
--Voting sequence state machine
	public StartVote: Voter ==> ()
	StartVote(v) == (
			log.Do(new RTALStart(v));
			StateMachine.toInit();
			CurrentVoter := v;
	)
	pre StateMachine.currentState=<STOP>
			and card CurrentPBE.voters <> 0
			and v in set CurrentPBE.voters
			and v not in set CurrentPBE.previousVoters
	post StateMachine.currentState=<INIT>
			 and v = CurrentVoter;

	public Vote: Candidate ==> ()
	Vote(c) == (
			log.Do(new RTALVote(c));
			StateMachine.toConfirm();
			CurrentChoice := c
	)
	pre StateMachine.currentState=<INIT>
			and CurrentVoter in set CurrentPBE.voters
			and c in set CurrentPBE.ballot
	post StateMachine.currentState=<CONFIRM>
			 and c = CurrentChoice
			 and CurrentVoter in set CurrentPBE.voters
			 and CurrentChoice in set CurrentPBE.ballot;
	
	public ConfirmVote: bool ==>()
	ConfirmVote(confirm) == (
		log.Do(new RTALConfirm(confirm));
			if(confirm)
			then(
					dcl currentCount: nat;
					dcl temp : RTAL;
					currentCount:=memory(CurrentChoice)+1;
					memory:= memory ++ {CurrentChoice|->currentCount};
					CurrentPBE.voteAct(CurrentVoter);	
					if(CurrentPBE.voters = {})
					then(
						StateMachine.toEnd();
						--AUDIT
						for all i in set dom  RTALMemory`memory 
						do (
							temp :=  RTALMemory`memory(i);
							temp.Do(temp)
						);
					)
					else(
						StateMachine.toStop();
					)
					)
			else(
					StateMachine.toInit();
					)
	)
	pre StateMachine.currentState=<CONFIRM> 
			and CurrentVoter.name <> []
			and CurrentChoice.name <> []
	post (StateMachine.currentState=<STOP>
			 and CurrentVoter in set CurrentPBE.previousVoters
			 and CurrentVoter not in set CurrentPBE.voters
			 )
			 or (
			 StateMachine.currentState=<INIT>
			 and CurrentVoter in set CurrentPBE.voters)
			 or (
			 StateMachine.currentState=<END>
			 and CurrentVoter in set CurrentPBE.previousVoters
			 and CurrentVoter not in set CurrentPBE.voters
			 );
end DRE