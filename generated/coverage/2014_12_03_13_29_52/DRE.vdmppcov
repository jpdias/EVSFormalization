class DRE
instance variables
	private code: nat1 :=9999;
	private memory: map Voter to Candidate := {|->} ;
	private log: seq of RTAL :=[];
	private logEntry: RTAL;
	private CurrentPBE: PBE;
	--inv Ballot;
operations
-- Constructor
	public DRE: PBE ==> DRE
	DRE(pbe) == (CurrentPBE := pbe;
							logEntry := new RTAL("Election Started");
							log := log ^ [logEntry];
							return self)
	pre 
		pbe.ballot <> {}
		and pbe.voters <> {}
		and pbe.code = code
	post 
		self.CurrentPBE.ballot = pbe.ballot
		and self.CurrentPBE.voters = pbe.voters;
		
--Register Votes to Memory
	public RegisterVote: Voter * Candidate ==> ()
	RegisterVote(v,c) == memory := memory munion {v|->c}
	pre c.name <> []
		and v.code>=1000
		and v.code<=9999
		and v.name <> []
	post memory = {v|->c} ++ memory~;

--Get Results

--Voting sequence state machine


functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end DRE